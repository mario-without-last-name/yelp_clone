-- useful tutorial documentation
-- https://www.postgresqltutorial.com/

-- for help
\?

-- list database
\l

-- create database called "example_database"
-- psql is not case sensitive, but it is standard convention
-- SQL must always end with ;
CREATE DATABASE example_database;

-- enter the database called "example_database"
\c example_database

-- create "products" table with columns "id", "name", "price", "on_sale"
CREATE TABLE products (
  id INT, 
  name VARCHAR(50),
  price INT,
  on_sale BOOLEAN
);

-- list tables in a database (that you have already entered into with \c)
\d

-- list column details in the table "products"
\d products

-- add a boolean-type "featured" column in the existing table "products"
ALTER TABLE products ADD COLUMN featured boolean;

-- remove "featured" column in the existing table "products"
ALTER TABLE products DROP COLUMN featured;

-- remove "products" table
DROP TABLE products;

-- go to any other database first, like the autogenerated "postgres" database
\c postgres

-- remove "practice" database, but cannot be done if you're currently accessing that database
DROP DATABASE practice;

CREATE DATABASE yelp;
CREATE TABLE restaurants (id INT, name VARCHAR(50), location VARCHAR(50), price_range INT);
INSERT INTO restaurants (id, name, location, price_range) values (123, 'mcdonalds', 'new yorks', 3);
SELECT * from restaurants;
INSERT INTO restaurants (id, name, location, price_range) values (124, 'pizza hut', 'vegas', 2);
SELECT name, price_range from restaurants;
-- Bad practice, don't leave other column fields blank when possile.
INSERT INTO restaurants (price_range) values (12);
DROP TABLE restaurants;
-- BIGSERIAL = auto-incrementing int
CREATE TABLE restaurants (id BIGSERIAL NOT NULL, name VARCHAR(50) NOT NULL, location VARCHAR(50) NOT NULL, price_range INT NOT NULL);
-- No need to manually insert value for auto-incrementing int
-- This also creates a temporary extra table "restaurants_id_seq". no need to pay attention to this
INSERT INTO restaurants (name, location, price_range) values ('wendys', 'denver', 3);
DROP TABLE restaurants;
-- this will automatically create a constraint named "restaurants_price_range_check"
CREATE TABLE restaurants (id BIGSERIAL NOT NULL, name VARCHAR(50) NOT NULL, location VARCHAR(50) NOT NULL, price_range INT NOT NULL CHECK(price_range >= 1 AND price_range <= 5));
-- to change constraints without dropping tables and giving the contraints names...
ALTER TABLE restaurants ADD CONSTRAINT check_price_range CHECK (price_range BETWEEN 1 AND 5);
-- want to update a constraint? you actually just remove the constraint and make a new one
ALTER TABLE restaurants DROP CONSTRAINT check_price_range;
ALTER TABLE restaurants ADD CONSTRAINT check_price_range CHECK (price_range BETWEEN 3 AND 7);
-- add a named constraint with the CREATE keyword
CREATE TABLE restaurants (id BIGSERIAL NOT NULL, name VARCHAR(50) NOT NULL, location VARCHAR(50) NOT NULL, price_range INT NOT NULL, CONSTRAINT check_price_range CHECK (price_range BETWEEN 5 AND 10));
-- this will return error
INSERT INTO restaurants (name, location, price_range) values ('wendys', 'denver', 10);
DROP TABLE restaurants
CREATE TABLE restaurants (id BIGSERIAL NOT NULL PRIMARY KEY, name VARCHAR(50) NOT NULL, location VARCHAR(50) NOT NULL, price_range INT NOT NULL CHECK(price_range >= 1 AND price_range <= 5));



-- normally, postgres does not return any value after inserting. Show the recently added data by adding "RETURNING *" or "RETURNING id, location" etc at the end
INSERT INTO restaurants (name, location, price_range) values ('cheesecake factory', 'dallas', 2) RETURNING id, location;
-- multiple inserts
INSERT INTO restaurants (name, location, price_range) values ('cheesecake factory', 'dallas', 2),('cheesecake factory', 'dallas', 2);
-- multiple deletes
DELETE FROM restaurants WHERE id >= 10 AND id <= 20;
-- multiple updates
UPDATE restaurants SET name = 'chocolatecake factory', location = 'indonesia' WHERE name = 'strawberrycake factory' RETURNING *;
UPDATE restaurants SET name = 'best restaurant', location = 'indonesia' WHERE name = 'strawberrycake factory' RETURNING *;
-- Don't forget "ORDER BY <<column_name>> <<ASC/DESC>> for SELECT"
SELECT * FROM restaurants ORDER BY id ASC;